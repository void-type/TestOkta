@using Microsoft.Extensions.Configuration

@inject IConfiguration configuration

@{
  ViewData["Title"] = "Sign In";
  var oktaDomain = configuration["Okta:OktaDomain"];
  var oktaClientId = configuration["Okta:ClientId"];
  var oktaAuthorizationServerId = configuration["Okta:AuthorizationServerId"];
  var oktaRedirectUri = configuration["Okta:RedirectUri"];
  var oktaLogoutRedirectUri = configuration["Okta:LogoutRedirectUri"];
}

@section Styles{
  <script src="https://global.oktacdn.com/okta-signin-widget/7.0.0/js/okta-sign-in.min.js"
          type="text/javascript"></script>
  <link href="https://global.oktacdn.com/okta-signin-widget/7.0.0/css/okta-sign-in.min.css" type="text/css"
        rel="stylesheet" />
  <style>
    #okta-login-container main.auth-container {
      margin-top: 0;
    }
  </style>
}

<h1 class="display-5 text-center my-5">Sign In</h1>
<div class="p-5 bg-light rounded-3 my-5">
  <div class="container-fluid">
    <p id="messageBox" class="m-0">You are not logged in.</p>
  </div>
</div>
<!-- where the sign-in form appears -->
<div id="okta-login-container" class="my-5"></div>
<button id="logout" class="button" onclick="logout()" style="display: none">Logout</button>
<button id="whoami" class="button" onclick="whoamiApi()" style="display: none">WhoAmI</button>
<label for="echo-text"></label><input id="echo-text" name="echo-text" style="display: none" type="text" value="helloworld"/>
<button id="echo" class="button" onclick="echoApi()" style="display: none">echo</button>

@section Scripts {
  <script type="text/javascript">
    // Configuration
    var oktaConfig = {
      logo: 'https://avatars.githubusercontent.com/u/3291875?v=4',
      clientId: "@oktaClientId",
      issuer: "@oktaDomain/oauth2/@oktaAuthorizationServerId",
      redirectUri: "@oktaRedirectUri",
    };

    // Search for URL Parameters to see if a user is being routed to the application to recover password
    var searchParams = new URL(window.location.href).searchParams;
    oktaConfig.otp = searchParams.get('otp');
    oktaConfig.state = searchParams.get('state');

    const oktaSignIn = new OktaSignIn(oktaConfig);

    oktaSignIn.authClient.token.getUserInfo()
      .then((user) => {
          document.getElementById("messageBox")
            .innerHTML = "Hello, " + user.email + "! You are *still* logged in! :)";
          showButtons();
        },
        (error) => {
          oktaSignIn.showSignInToGetTokens({
              el: '#okta-login-container'
            })
            .then(function (tokens) {
              oktaSignIn.authClient.tokenManager.setTokens(tokens);
              oktaSignIn.remove();

              const idToken = tokens.idToken;
              document.getElementById("messageBox")
                .innerHTML = "Hello, " + idToken.claims.email + "! You just logged in! :)";
              showButtons();
            })
            .catch(function (err) {
              console.error(err);
            });
        });

    function showButtons() {
      document.getElementById("logout")
        .style.display = 'block';
      document.getElementById("whoami")
        .style.display = 'block';
      document.getElementById("echo-text")
        .style.display = 'block';
      document.getElementById("echo")
        .style.display = 'block';
    }

    function logout() {
      oktaSignIn.authClient.signOut({
          clearTokensBeforeRedirect: true,
          postLogoutRedirectUri: '@oktaLogoutRedirectUri'
        });
    }

    function whoamiApi() {
      oktaSignIn.authClient.tokenManager.getTokens()
        .then(function(tokens){
          // Test the API
          fetch('/authtest/whoami', {
              headers: {
                Authorization: 'Bearer ' + tokens.accessToken.accessToken,
                "Content-Type": "application/json",
                "Accept": "application/json"
              },
            })
            .then((response) => response.json())
            .then(function (response) {

              console.log("Available on server:\n" + JSON.stringify(response, null, 2))

              // Information available on the client
              const claims = tokens.accessToken.claims;

              const clientCredentials = {
                userName: claims.sub,
                groups: claims.groups
              }

              console.log("Available on client:\n" + JSON.stringify(clientCredentials, null, 2))
            });
        });
    }

    function echoApi() {
      oktaSignIn.authClient.tokenManager.getTokens()
        .then(function(tokens){
          // This will 403 if you aren't in the privileged-users group
          fetch('/authtest/echo?input=' + document.getElementById('echo-text').value, {
            headers: {
              Authorization: 'Bearer ' + tokens.accessToken.accessToken,
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
          })
          .then((response) => response.json())
          .then((response) => console.log(response));
        });
    }
  </script>
}
